---
title: "Exercise 05"
author: "Hubert Rehrauer"
date: "14 10 2022"
format: 
    html:
      toc: true
      self-contained: true
      highlight-style: github
      code-line-numbers: true
editor_options: 
    chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Load Packages and Data

Use the Rsubread package to map a read file found at http://fgcz-gstore.uzh.ch/public/Yeast_Reads/


```{r, eval=FALSE}
BiocManager::install("Rsubread", update=FALSE)
BiocManager::install("BSgenome.Scerevisiae.UCSC.sacCer3", update=FALSE)

# download the read data file
download.file("http://fgcz-gstore.uzh.ch/public/Yeast_Reads/20170313.A-G1_R1-sub.fastq.gz", "G1_R1-sub.fastq.gz")


```



```{r, message=FALSE}
library(BSgenome)
library(BSgenome.Scerevisiae.UCSC.sacCer3)
library(Rsubread)
library(dplyr)
library(GenomicAlignments)
library(RVenn)
```

Use the commands *export* to export method in the *BSgenome* package to write the genome as a fasta file on the local disk. Use the commands *buildindex* and *align* of the *Rsubread* package to map the reads. Consult the help pages of the respective functions. Build the index so that at most 2GB of RAM is used. Run the alignment with 4 threads. If you computer has less resources, adapt accordingly.

We get the reference sequence from the genome package *BSgenome.Scerevisiae.UCSC.sacCer3* and we export it as a fasta file.

```{r}
export(BSgenome.Scerevisiae.UCSC.sacCer3, con="sacCer3-genome.fasta")
buildindex("sacCer3-Rsub", "sacCer3-genome.fasta", memory=2000 )
```

## Align

Align to the genome with the *RSubread::align* function that does not explicitely look for spliced alignements. Do the alignment for the full length reads. 
Then run the alignment also a second time with fixed trimming of 10 bases from both ends, i.e. use *align(....., nTrim5 = 10, nTrim3 = 10)*.

## Question 1: For both runs (with and without trimming), what fraction of the reads aligns uniquely and multiple times?


## Question 2: Are the reads that align the same in both cases?

Check the agreement of the alignments. Load the uniquely aligning reads. Use the function *readGAlignments*.
Use the parameter settings to read also the read id, and the number of hits (NH)

Hint:
```{r, eval=FALSE}
sbp <- ScanBamParam(what = c("qname"), tag="NH")
alignFull <- readGAlignments(..., param=sbp)
alignTrimmed <- readGAlignments(..., param=sbp)

```



## Question 3: For those reads that align full and trimmed, do they align to the same location?

Hint:

```{r, eval=FALSE}

## aligning to the same location?
common = intersect(mcols(alignFull)$qname, mcols(alignTrimmed)$qname)

alignFull <- alignFull[match(common, mcols(alignFull)$qname)]
alignTrimmed <- alignTrimmed[match(common, mcols(alignTrimmed)$qname)]

ovlStatus <- poverlaps(granges(alignTrimmed), granges(alignFull), type="within") %>% as.vector()
mean(ovlStatus)

```




